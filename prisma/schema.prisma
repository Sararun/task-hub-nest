// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  email         String          @unique @db.VarChar(255)
  password      String          @db.VarChar(30)
  timestamps    DateTime        @db.Timestamp()
  comments      Comment[]
  photo         String?         @db.Text
  tasksOwned    Task[]          @relation("tasksOwned")
  tasksAssigned Task[]          @relation("tasksAssigned")
  BoardUserRole BoardUserRole[]
}

model Task {
  id           Int       @id @default(autoincrement())
  images       Json?     @db.JsonB
  name         String    @db.VarChar(255)
  description  String?   @db.Text
  deadline     DateTime?
  owner_id     Int
  owner        User      @relation(name: "tasksOwned", fields: [owner_id], references: [id])
  recepient_id Int?
  recepient    User?     @relation(name: "tasksAssigned", fields: [recepient_id], references: [id])
  column       Column    @relation(fields: [column_id], references: [id], onDelete: Cascade)
  column_id    Int
  status       Status    @relation(fields: [statusId], references: [id])
  statusId     Int
  timestamps   DateTime  @db.Timestamp()
  photos       Json?     @db.JsonB
  Comment      Comment[]
}

model Column {
  id            Int    @id @default(autoincrement())
  name          String @db.VarChar(255)
  column_number Int
  board         Board  @relation(fields: [board_id], references: [id], onDelete: Cascade)
  board_id      Int
  Task          Task[]

  @@unique([board_id, column_number])
}

model Board {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  columns       Column[]
  BoardUserRole BoardUserRole[]
}

model Status {
  id         Int        @id @default(autoincrement())
  name       StatusEnum
  color_code String     @db.VarChar(9)
  Task       Task[]
}

model Comment {
  id       Int       @id @default(autoincrement())
  content  String    @db.Text
  taskId   Int
  task     Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId   Int
  user     User      @relation(fields: [userId], references: [id])
  answerId Int?
  answer   Comment?  @relation("ParentChild", fields: [answerId], references: [id])
  type     Boolean?
  children Comment[] @relation("ParentChild")
}

model Role {
  id            Int             @id @default(autoincrement())
  name          RoleEnum        @unique
  BoardUserRole BoardUserRole[]
}

model BoardUserRole {
  id      Int   @id @default(autoincrement())
  board   Board @relation(fields: [boardId], references: [id])
  boardId Int
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  role    Role  @relation(fields: [roleId], references: [id])
  roleId  Int

  @@unique([boardId, userId, roleId])
}

enum StatusEnum {
  NotStatus
  TODO
  InProgress
  Review
  Done
  Blocked
}

enum RoleEnum {
  Admin
  Member
}
